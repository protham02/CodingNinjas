You are given the starting 'l' and the ending 'r' positions of the array 'ARR'.


You must sort the elements between 'l' and 'r'.


Note:
Change in the input array itself. So no need to return or print anything.
Example:
Input: ‘N’ = 7,
'ARR' = [2, 13, 4, 1, 3, 6, 28]

Output: [1 2 3 4 6 13 28]

Explanation: After applying 'merge sort' on the input array, the output is [1 2 3 4 6 13 28].
Input format :
The first line contains an integer <em>**'N'**</em> representing the size of the array/list.

The second line contains 'N' single space-separated integers representing the elements in the array/list.
Output format :
You don't need to return anything. In the output, you will see the array after you do the modification.
Sample Input 1:
7
2 13 4 1 3 6 28
Sample Output 1:
1 2 3 4 6 13 28
Explanation of Sample Output 1:
After applying 'merge sort' on the input array, the output is [1 2 3 4 6 13 28].
______________________________________________________________________________________________________________________________________________________________
SOL


void merging(vector<int>& input,int low, int mid, int high) {
    int b[high-low+1];
    int l1=low,l2=mid+1,i=0;
    while(l1 <= mid && l2 <= high) {
        if(input[l1] <= input[l2]) b[i++] = input[l1++];
        else  b[i++] = input[l2++];      
    }
        while(l1 <= mid)  {
            b[i++] = input[l1++];
        }
        while(l2 <= high){
            b[i++] = input[l2++];
        }
        int j=0;
        for(i = low; i <= high; i++)
            input[i] = b[j++];
}
void mergeSort1(vector<int>& input,int first,int last){
    if(first<last){
        int mid = (first+last) / 2;
        mergeSort1(input,first, mid);
        mergeSort1(input,mid+1,last);
        merging(input,first, mid,last);
    } 
    else return;  
}
void mergeSort(vector<int>& arr, int l, int r) {
    if(arr.size()<=0) return;
    mergeSort1(arr,0,arr.size()-1);
}
